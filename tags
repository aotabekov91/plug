!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!CSS	c,class	/classes/
!_TAG_KIND_DESCRIPTION!CSS	i,id	/identities/
!_TAG_KIND_DESCRIPTION!CSS	s,selector	/selectors/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!CSS	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	0.0	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/adam/code/plug/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
BASE_DIR	tests/conftest.py	/^BASE_DIR = Path(__file__).parent.parent$/;"	v
Base	src/plug/qt/utils/moder.py	/^from plug.utils import Moder as Base$/;"	Y	nameref:unknown:Moder
BaseListener	src/plug/qt/utils/listener_key.py	/^from plug.utils.listener_key import KeyListener as BaseListener$/;"	Y	nameref:unknown:KeyListener
BasePlug	src/plug/qt/base.py	/^from plug import Plug as BasePlug$/;"	Y	nameref:unknown:Plug
Buffer	src/plug/qt/utils/buffer.py	/^class Buffer(QtCore.QObject):$/;"	c
Command	src/plug/qt/modes/command/main.py	/^class Command(Mode):$/;"	c
Exec	src/plug/qt/modes/exec/main.py	/^class Exec(Mode):$/;"	c
FileBrowser	src/plug/qt/plugs/trees/file.py	/^class FileBrowser(TreePlug):$/;"	c
Input	src/plug/qt/modes/input/main.py	/^class Input(Mode):$/;"	c
InputWidget	src/plug/qt/modes/input/widget.py	/^class InputWidget(QtWidgets.QWidget):$/;"	c
KeyListener	src/plug/qt/utils/listener_key.py	/^class KeyListener(BaseListener, QtCore.QObject): pass$/;"	c
KeyListener	src/plug/utils/listener_key.py	/^class KeyListener:$/;"	c
Mode	src/plug/qt/modes/base.py	/^class Mode(Plug):$/;"	c
Normal	src/plug/qt/modes/normal/main.py	/^class Normal(Mode):$/;"	c
Picky	src/plug/utils/picky.py	/^class Picky:$/;"	c
Plug	src/plug/plug.py	/^class Plug:$/;"	c
Plug	src/plug/qt/base.py	/^class Plug(BasePlug):$/;"	c
PlugApp	src/plug/qt/app.py	/^class PlugApp(Plug, QtWidgets.QApplication):$/;"	c
Plug	src/plug/qt/obj.py	/^class Plug(Plug, QtCore.QObject):$/;"	c
Plugin	README.md	/^# Plugin$/;"	c
Moder	src/plug/qt/utils/moder.py	/^class Moder(Base, QtCore.QObject):$/;"	c
Moder	src/plug/utils/dotdict.py	/^class Moder:$/;"	c
Moder	src/plug/utils/moder.py	/^class Moder:$/;"	c
Powerline	src/plug/qt/plugs/powerline/main.py	/^class Powerline(Plug):$/;"	c
PowerlineWidget	src/plug/qt/plugs/powerline/widget.py	/^class PowerlineWidget(QtWidgets.QWidget):$/;"	c
QLabel#Statusbar_colon	src/plug/qt/plugs/powerline/style.css	/^QLabel#Statusbar_colon {$/;"	i
QLineEdit#Statusbar_edit	src/plug/qt/plugs/powerline/style.css	/^QLineEdit#Statusbar_edit {$/;"	i
QWidget#Powerline QLabel#keys	src/plug/qt/plugs/powerline/style.css	/^QWidget#Powerline QLabel#keys {$/;"	i
QWidget#Powerline QLabel#mode	src/plug/qt/plugs/powerline/style.css	/^QWidget#Powerline QLabel#mode {$/;"	i
QWidget#Powerline QLabel#page	src/plug/qt/plugs/powerline/style.css	/^QWidget#Powerline QLabel#page {$/;"	i
Search	src/plug/qt/modes/search/main.py	/^class Search(Mode):$/;"	c
TreePlug	src/plug/qt/plugs/trees/base.py	/^class TreePlug(Plug):$/;"	c
Visual	src/plug/qt/modes/visual/main.py	/^class Visual(Mode):$/;"	c
ZMQListener	src/plug/qt/utils/listener_zmq.py	/^class ZMQListener(QtCore.QObject):$/;"	c
__delattr__	src/plug/utils/moder.py	/^    __delattr__ = dict.__delitem__$/;"	v	class:dotdict	file:
__getattr__	src/plug/utils/moder.py	/^    __getattr__ = dict.get$/;"	v	class:dotdict	file:
__init__	src/plug/plug.py	/^    def __init__(self, $/;"	m	class:Plug
__init__	src/plug/qt/app.py	/^    def __init__(self, $/;"	m	class:PlugApp
__init__	src/plug/qt/base.py	/^    def __init__(self, $/;"	m	class:Plug
__init__	src/plug/qt/modes/base.py	/^    def __init__(self, $/;"	m	class:Mode
__init__	src/plug/qt/modes/command/main.py	/^    def __init__(self, $/;"	m	class:Command
__init__	src/plug/qt/modes/exec/main.py	/^    def __init__(self, $/;"	m	class:Exec
__init__	src/plug/qt/modes/input/main.py	/^    def __init__(self, $/;"	m	class:Input
__init__	src/plug/qt/modes/input/widget.py	/^    def __init__(self, parent):$/;"	m	class:InputWidget
__init__	src/plug/qt/modes/normal/main.py	/^    def __init__(self, $/;"	m	class:Normal
__init__	src/plug/qt/modes/search/main.py	/^    def __init__(self, $/;"	m	class:Search
__init__	src/plug/qt/modes/visual/main.py	/^    def __init__(self, $/;"	m	class:Visual
__init__	src/plug/qt/obj.py	/^    def __init__(self,$/;"	m	class:Plug
__init__	src/plug/qt/plugs/powerline/main.py	/^    def __init__(self, **kwargs):$/;"	m	class:Powerline
__init__	src/plug/qt/plugs/powerline/widget.py	/^    def __init__(self):$/;"	m	class:PowerlineWidget
__init__	src/plug/qt/plugs/trees/base.py	/^    def __init__(self, **kwargs):$/;"	m	class:TreePlug
__init__	src/plug/qt/plugs/trees/file.py	/^    def __init__(self, **kwargs):$/;"	m	class:FileBrowser
__init__	src/plug/qt/utils/buffer.py	/^    def __init__(self, app):$/;"	m	class:Buffer
__init__	src/plug/qt/utils/listener_zmq.py	/^    def __init__(self, parent):$/;"	m	class:ZMQListener
__init__	src/plug/utils/dotdict.py	/^    def __init__(self, app=None):$/;"	m	class:Moder
__init__	src/plug/utils/listener_key.py	/^    def __init__(self, parent):$/;"	m	class:KeyListener
__init__	src/plug/utils/picky.py	/^    def __init__(self, picks, folder, base):$/;"	m	class:Picky
__init__	src/plug/utils/moder.py	/^    def __init__(self, app=None):$/;"	m	class:Moder
__setattr__	src/plug/utils/moder.py	/^    __setattr__ = dict.__setitem__$/;"	v	class:dotdict	file:
_command	src/plug/utils/command.py	/^    def _command(func):$/;"	f	function:command	file:
_onExecuteMatch	src/plug/qt/modes/base.py	/^    def _onExecuteMatch(self): $/;"	m	class:Mode
_register	src/plug/qt/utils/register.py	/^    def _register(func):$/;"	f	function:register	file:
_set	src/plug/qt/base.py	/^        def _set(leader):$/;"	f	member:Plug.setLeaders	file:
act	src/plug/qt/base.py	/^    def act(self, request):$/;"	m	class:Plug
activate	src/plug/plug.py	/^    def activate(self):$/;"	m	class:Plug
activate	src/plug/qt/obj.py	/^    def activate(self):$/;"	m	class:Plug
activateCommandMode	src/plug/qt/base.py	/^    def activateCommandMode(self):$/;"	m	class:Plug
add	src/plug/qt/utils/moder.py	/^    def add(self, picked, kind):$/;"	m	class:Moder
add	src/plug/utils/dotdict.py	/^    def add(self, picked, kind):$/;"	m	class:Moder
add	src/plug/utils/moder.py	/^    def add(self, picked, kind):$/;"	m	class:Moder
addKeys	src/plug/qt/modes/base.py	/^    def addKeys(self, event, widget=None):$/;"	m	class:Mode
bufferCreated	src/plug/qt/utils/buffer.py	/^    bufferCreated=QtCore.pyqtSignal(object)$/;"	v	class:Buffer
center	src/plug/qt/plugs/trees/base.py	/^    def center(self):$/;"	m	class:TreePlug
checkKey	src/plug/qt/base.py	/^    def checkKey(self, event, kind='listen_leader'):$/;"	m	class:Plug
checkListen	src/plug/qt/obj.py	/^    def checkListen(self, event):$/;"	m	class:Plug
checkMode	src/plug/qt/obj.py	/^    def checkMode(self, widget, event):$/;"	m	class:Plug
checkSpecial	src/plug/qt/modes/base.py	/^    def checkSpecial(self, event):$/;"	m	class:Mode
checkSpecial	src/plug/qt/modes/exec/main.py	/^    def checkSpecial(self, event):$/;"	m	class:Exec
checkSpecial	src/plug/qt/modes/input/main.py	/^    def checkSpecial(self, event):$/;"	m	class:Input
cleanup	src/plug/utils/picky.py	/^    def cleanup(self):$/;"	m	class:Picky
cleanupPicks	src/plug/qt/utils/moder.py	/^    def cleanupPicks(self): super().cleanupPicks()$/;"	m	class:Moder
cleanupPicks	src/plug/utils/dotdict.py	/^    def cleanupPicks(self): self.picky.cleanup()$/;"	m	class:Moder
cleanupPicks	src/plug/utils/moder.py	/^    def cleanupPicks(self): self.picky.cleanup()$/;"	m	class:Moder
clear	src/plug/qt/modes/search/main.py	/^    def clear(self):$/;"	m	class:Search
clearKeys	src/plug/qt/modes/base.py	/^    def clearKeys(self):$/;"	m	class:Mode
closeCurrentView	src/plug/qt/modes/normal/main.py	/^    def closeCurrentView(self): $/;"	m	class:Normal
command	src/plug/utils/command.py	/^def command(delay=None, wait=None, kind='os'):$/;"	f
createFolder	src/plug/plug.py	/^    def createFolder(self, folder=None, attr_name='folder'):$/;"	m	class:Plug
deactivate	src/plug/plug.py	/^    def deactivate(self):$/;"	m	class:Plug
deactivate	src/plug/qt/obj.py	/^    def deactivate(self):$/;"	m	class:Plug
deactivateCommandMode	src/plug/qt/base.py	/^    def deactivateCommandMode(self):$/;"	m	class:Plug
decrementFold	src/plug/qt/modes/normal/main.py	/^    def decrementFold(self): $/;"	m	class:Normal
delisten	src/plug/qt/modes/base.py	/^    def delisten(self):$/;"	m	class:Mode
delisten	src/plug/qt/modes/exec/main.py	/^    def delisten(self):$/;"	m	class:Exec
delisten	src/plug/qt/modes/search/main.py	/^    def delisten(self, *args, **kwargs):$/;"	m	class:Search
delisten	src/plug/qt/modes/visual/main.py	/^    def delisten(self):$/;"	m	class:Visual
delisten	src/plug/qt/obj.py	/^    def delisten(self): self.listening=False$/;"	m	class:Plug
delistenWanted	src/plug/qt/obj.py	/^    delistenWanted=QtCore.pyqtSignal()$/;"	v	class:Plug
delocateUI	src/plug/qt/obj.py	/^    def delocateUI(self):$/;"	m	class:Plug
dotdict	src/plug/utils/moder.py	/^class dotdict(dict):$/;"	c
down	src/plug/qt/modes/normal/main.py	/^    def down(self, digit=1): $/;"	m	class:Normal
escapePressed	src/plug/qt/modes/exec/main.py	/^    escapePressed=QtCore.pyqtSignal()$/;"	v	class:Exec
escapePressed	src/plug/qt/modes/input/main.py	/^    escapePressed=QtCore.pyqtSignal()$/;"	v	class:Input
eventFilter	src/plug/qt/base.py	/^    def eventFilter(self, widget, event):$/;"	m	class:Plug
eventFilter	src/plug/qt/modes/base.py	/^    def eventFilter(self, widget, event):$/;"	m	class:Mode
eventFilter	src/plug/qt/modes/exec/main.py	/^    def eventFilter(self, w, e):$/;"	m	class:Exec
eventFilter	src/plug/qt/modes/input/main.py	/^    def eventFilter(self, w, e):$/;"	m	class:Input
eventFilter	src/plug/qt/modes/input/widget.py	/^    def eventFilter(self, widget, event):$/;"	m	class:InputWidget
eventFilter	src/plug/qt/obj.py	/^    def eventFilter(self, widget, event):$/;"	m	class:Plug
executeMatch	src/plug/qt/modes/base.py	/^    def executeMatch(self, matches, partial, digit):$/;"	m	class:Mode
exit	src/plug/plug.py	/^    def exit(self): self.running=False$/;"	m	class:Plug
exit	src/plug/qt/app.py	/^    def exit(self): $/;"	m	class:PlugApp
exit	src/plug/qt/modes/base.py	/^    def exit(self): self.app.exit()$/;"	m	class:Mode
find	src/plug/qt/modes/search/main.py	/^    def find(self):$/;"	m	class:Search
find	src/plug/qt/plugs/trees/base.py	/^    def find(self, item, model, parent=None):$/;"	m	class:TreePlug
focusCurrentView	src/plug/qt/modes/normal/main.py	/^    def focusCurrentView(self): $/;"	m	class:Normal
focusDownView	src/plug/qt/modes/normal/main.py	/^    def focusDownView(self): $/;"	m	class:Normal
focusSearch	src/plug/qt/modes/search/main.py	/^    def focusSearch(self): $/;"	m	class:Search
focusUpView	src/plug/qt/modes/normal/main.py	/^    def focusUpView(self): $/;"	m	class:Normal
forceDelisten	src/plug/qt/obj.py	/^    forceDelisten=QtCore.pyqtSignal()$/;"	v	class:Plug
getConnection	src/plug/plug.py	/^    def getConnection(self, kind):$/;"	m	class:Plug
getInfo	src/plug/utils/picky.py	/^    def getInfo(self, gid): $/;"	m	class:Picky
getKeys	src/plug/qt/modes/base.py	/^    def getKeys(self):$/;"	m	class:Mode
getLine	src/plug/qt/modes/search/main.py	/^    def getLine(self, text, page, rectF):$/;"	m	class:Search
getMatches	src/plug/qt/modes/base.py	/^    def getMatches(self, key, digit):$/;"	m	class:Mode
getModes	src/plug/utils/dotdict.py	/^    def getModes(self): return self.modes$/;"	m	class:Moder
getModes	src/plug/utils/moder.py	/^    def getModes(self): return self.modes$/;"	m	class:Moder
getPath	src/plug/qt/plugs/trees/file.py	/^    def getPath(self, index=None):$/;"	m	class:FileBrowser
getPlugs	src/plug/utils/dotdict.py	/^    def getPlugs(self): return self.plugs$/;"	m	class:Moder
get_plug_class	src/plug/qt/modes/command/__init__.py	/^def get_plug_class(): return Command$/;"	f
get_plug_class	src/plug/qt/modes/exec/__init__.py	/^def get_plug_class(): return Exec$/;"	f
get_plug_class	src/plug/qt/modes/input/__init__.py	/^def get_plug_class(): return Input$/;"	f
get_plug_class	src/plug/qt/modes/normal/__init__.py	/^def get_plug_class(): return Normal$/;"	f
get_plug_class	src/plug/qt/modes/search/__init__.py	/^def get_plug_class(): return Search$/;"	f
get_plug_class	src/plug/qt/modes/visual/__init__.py	/^def get_plug_class(): return Visual$/;"	f
get_plug_class	src/plug/qt/plugs/powerline/__init__.py	/^def get_plug_class(): return Powerline$/;"	f
gotoBegin	src/plug/qt/modes/normal/main.py	/^    def gotoBegin(self):$/;"	m	class:Normal
gotoEnd	src/plug/qt/modes/normal/main.py	/^    def gotoEnd(self):$/;"	m	class:Normal
gotoPage	src/plug/qt/modes/normal/main.py	/^    def gotoPage(self, digit=1):$/;"	m	class:Normal
handle	src/plug/plug.py	/^    def handle(self, request):$/;"	m	class:Plug
hideClearField	src/plug/qt/modes/input/main.py	/^    def hideClearField(self):$/;"	m	class:Input
incrementDown	src/plug/qt/modes/normal/main.py	/^    def incrementDown(self, digit=1): $/;"	m	class:Normal
incrementFold	src/plug/qt/modes/normal/main.py	/^    def incrementFold(self): $/;"	m	class:Normal
incrementLeft	src/plug/qt/modes/normal/main.py	/^    def incrementLeft(self, digit=1): $/;"	m	class:Normal
incrementRight	src/plug/qt/modes/normal/main.py	/^    def incrementRight(self, digit=1): $/;"	m	class:Normal
incrementUp	src/plug/qt/modes/normal/main.py	/^    def incrementUp(self, digit=1): $/;"	m	class:Normal
inner	src/plug/qt/utils/register.py	/^        def inner(self, *args, **kwargs): $/;"	f	function:register._register	file:
inner	src/plug/utils/command.py	/^        def inner(self, *args, **kwargs):$/;"	f	function:command._command	file:
install	src/plug/utils/picky.py	/^    def install(self):$/;"	m	class:Picky
installDirect	src/plug/utils/picky.py	/^    def installDirect(self, gid):$/;"	m	class:Picky
installPicks	src/plug/qt/utils/moder.py	/^    def installPicks(self): super().installPicks()$/;"	m	class:Moder
installPicks	src/plug/utils/dotdict.py	/^    def installPicks(self): self.picky.install()$/;"	m	class:Moder
installPicks	src/plug/utils/moder.py	/^    def installPicks(self): self.picky.install()$/;"	m	class:Moder
jump	src/plug/qt/modes/search/main.py	/^    def jump(self, increment=1, match=None):$/;"	m	class:Search
keyPressed	src/plug/qt/obj.py	/^    keyPressed=QtCore.pyqtSignal(object, object)$/;"	v	class:Plug
keysChanged	src/plug/qt/modes/base.py	/^    keysChanged=QtCore.pyqtSignal(str)$/;"	v	class:Mode
keysChanged	src/plug/qt/utils/moder.py	/^    keysChanged=QtCore.pyqtSignal(str)$/;"	v	class:Moder
left	src/plug/qt/modes/normal/main.py	/^    def left(self, digit=1): $/;"	m	class:Normal
listen	src/plug/qt/modes/base.py	/^    def listen(self):$/;"	m	class:Mode
listen	src/plug/qt/modes/exec/main.py	/^    def listen(self):$/;"	m	class:Exec
listen	src/plug/qt/modes/input/main.py	/^    def listen(self):$/;"	m	class:Input
listen	src/plug/qt/modes/normal/main.py	/^    def listen(self):$/;"	m	class:Normal
listen	src/plug/qt/modes/search/main.py	/^    def listen(self): $/;"	m	class:Search
listen	src/plug/qt/modes/visual/main.py	/^    def listen(self):$/;"	m	class:Visual
listen	src/plug/qt/obj.py	/^    def listen(self): $/;"	m	class:Plug
listen	src/plug/utils/listener_key.py	/^    def listen(self, key, func): $/;"	m	class:KeyListener
listenWanted	src/plug/qt/obj.py	/^    listenWanted=QtCore.pyqtSignal(object)$/;"	v	class:Plug
load	src/plug/qt/utils/buffer.py	/^    def load(self, filePath): pass $/;"	m	class:Buffer
load	src/plug/utils/dotdict.py	/^    def load(self):$/;"	m	class:Moder
load	src/plug/utils/moder.py	/^    def load(self):$/;"	m	class:Moder
loadModes	src/plug/utils/dotdict.py	/^    def loadModes(self, modes):$/;"	m	class:Moder
loadModes	src/plug/utils/moder.py	/^    def loadModes(self, modes):$/;"	m	class:Moder
loadPlugs	src/plug/utils/dotdict.py	/^    def loadPlugs(self, plugs):$/;"	m	class:Moder
loadPlugs	src/plug/utils/moder.py	/^    def loadPlugs(self, plugs):$/;"	m	class:Moder
locateUI	src/plug/qt/obj.py	/^    def locateUI(self):$/;"	m	class:Plug
loop	src/plug/qt/utils/listener_zmq.py	/^    def loop(self):$/;"	m	class:ZMQListener
loop	src/plug/utils/listener_key.py	/^    def loop(self): self.listener.start()$/;"	m	class:KeyListener
modeChanged	src/plug/qt/utils/moder.py	/^    modeChanged=QtCore.pyqtSignal(object)$/;"	v	class:Moder
modeKey	src/plug/qt/base.py	/^    def modeKey(self, mode): $/;"	m	class:Plug
modeWanted	src/plug/qt/obj.py	/^    modeWanted=QtCore.pyqtSignal(object)$/;"	v	class:Plug
next	src/plug/qt/modes/normal/main.py	/^    def next(self, digit=1): $/;"	m	class:Normal
next	src/plug/qt/modes/search/main.py	/^    def next(self): self.jump(+1)$/;"	m	class:Search
on_backspacePressed	src/plug/qt/modes/base.py	/^    def on_backspacePressed(self): self.clearKeys()$/;"	m	class:Mode
on_carriagePressed	src/plug/qt/modes/base.py	/^    def on_carriagePressed(self): pass$/;"	m	class:Mode
on_carriagePressed	src/plug/qt/modes/input/main.py	/^    def on_carriagePressed(self): $/;"	m	class:Input
on_escapePressed	src/plug/qt/modes/base.py	/^    def on_escapePressed(self): $/;"	m	class:Mode
on_escapePressed	src/plug/qt/modes/input/main.py	/^    def on_escapePressed(self): $/;"	m	class:Input
on_fileChanged	src/plug/qt/utils/buffer.py	/^    def on_fileChanged(self, filePath): pass$/;"	m	class:Buffer
on_hashChanged	src/plug/qt/plugs/powerline/main.py	/^    def on_hashChanged(self, model):$/;"	m	class:Powerline
on_indexChanged	src/plug/qt/plugs/trees/base.py	/^    def on_indexChanged(self, index): pass$/;"	m	class:TreePlug
on_itemChanged	src/plug/qt/plugs/powerline/main.py	/^    def on_itemChanged(self, view, item=None): $/;"	m	class:Powerline
on_itemChanged	src/plug/qt/plugs/trees/base.py	/^    def on_itemChanged(self, item): pass$/;"	m	class:TreePlug
on_keysChanged	src/plug/qt/plugs/powerline/main.py	/^    def on_keysChanged(self, pressed):$/;"	m	class:Powerline
on_modeChanged	src/plug/qt/plugs/powerline/main.py	/^    def on_modeChanged(self, mode):$/;"	m	class:Powerline
on_outlineClicked	src/plug/qt/plugs/trees/base.py	/^    def on_outlineClicked(self, index=None): pass$/;"	m	class:TreePlug
on_outlineCollapsed	src/plug/qt/plugs/trees/base.py	/^    def on_outlineCollapsed(self, index): pass$/;"	m	class:TreePlug
on_outlineExpanded	src/plug/qt/plugs/trees/base.py	/^    def on_outlineExpanded(self, index): pass$/;"	m	class:TreePlug
on_press	src/plug/utils/listener_key.py	/^    def on_press(self, key):$/;"	m	class:KeyListener
on_release	src/plug/utils/listener_key.py	/^    def on_release(self, key):$/;"	m	class:KeyListener
on_returnPressed	src/plug/qt/modes/base.py	/^    def on_returnPressed(self): self.returnPressed.emit()$/;"	m	class:Mode
on_returnPressed	src/plug/qt/modes/exec/main.py	/^    def on_returnPressed(self): $/;"	m	class:Exec
on_tabPressed	src/plug/qt/modes/base.py	/^    def on_tabPressed(self): pass$/;"	m	class:Mode
on_tabPressed	src/plug/qt/modes/exec/main.py	/^    def on_tabPressed(self): $/;"	m	class:Exec
on_textChanged	src/plug/qt/modes/exec/main.py	/^    def on_textChanged(self):$/;"	m	class:Exec
on_uiFocusGained	src/plug/qt/obj.py	/^    def on_uiFocusGained(self):$/;"	m	class:Plug
on_uiHideWanted	src/plug/qt/obj.py	/^    def on_uiHideWanted(self):$/;"	m	class:Plug
on_viewChanged	src/plug/qt/plugs/powerline/main.py	/^    def on_viewChanged(self, view): $/;"	m	class:Powerline
on_viewChanged	src/plug/qt/plugs/trees/base.py	/^    def on_viewChanged(self, view): self.setData()$/;"	m	class:TreePlug
open	src/plug/qt/plugs/trees/base.py	/^    def open(self, how, focus, *args, **kwargs): $/;"	m	class:TreePlug
open	src/plug/qt/plugs/trees/file.py	/^    def open(self, how='reset', focus=True):$/;"	m	class:FileBrowser
openAndDeactivate	src/plug/qt/plugs/trees/base.py	/^    def openAndDeactivate(self): $/;"	m	class:TreePlug
openBelow	src/plug/qt/plugs/trees/base.py	/^    def openBelow(self): $/;"	m	class:TreePlug
openBelowFocus	src/plug/qt/plugs/trees/base.py	/^    def openBelowFocus(self): $/;"	m	class:TreePlug
openReset	src/plug/qt/plugs/trees/base.py	/^    def openReset(self): $/;"	m	class:TreePlug
openResetFocus	src/plug/qt/plugs/trees/base.py	/^    def openResetFocus(self): self.open(how='reset', focus=True)$/;"	m	class:TreePlug
pageDown	src/plug/qt/modes/normal/main.py	/^    def pageDown(self, digit=1): $/;"	m	class:Normal
pageUp	src/plug/qt/modes/normal/main.py	/^    def pageUp(self, digit=1): $/;"	m	class:Normal
parse	src/plug/qt/app.py	/^    def parse(self): $/;"	m	class:PlugApp
plug	tests/test_zmq.py	/^def plug(): return Plug(listen_port=False)$/;"	f
prev	src/plug/qt/modes/normal/main.py	/^    def prev(self, digit=1): $/;"	m	class:Normal
prev	src/plug/qt/modes/search/main.py	/^    def prev(self): self.jump(-1)$/;"	m	class:Search
psocket	tests/test_zmq.py	/^def psocket(): $/;"	f
pytest cache directory	.pytest_cache/README.md	/^# pytest cache directory #$/;"	c
readjust	src/plug/qt/modes/normal/main.py	/^    def readjust(self): $/;"	m	class:Normal
register	src/plug/plug.py	/^        def register(kind):$/;"	f	member:Plug.registerByParent	file:
register	src/plug/plug.py	/^        def register(paths, kind):$/;"	f	member:Plug.registerByUmay	file:
register	src/plug/plug.py	/^    def register(self, request): pass$/;"	m	class:Plug
register	src/plug/qt/obj.py	/^    def register(self):$/;"	m	class:Plug
register	src/plug/qt/utils/register.py	/^def register(key=None, info=None, modes=[], command=True):$/;"	f
register	src/plug/utils/dotdict.py	/^    def register(self, plug, actions): $/;"	m	class:Moder
register	src/plug/utils/moder.py	/^    def register(self, plug, actions): $/;"	m	class:Moder
registerByParent	src/plug/plug.py	/^    def registerByParent(self, kind='PUSH'):$/;"	m	class:Plug
registerByUmay	src/plug/plug.py	/^    def registerByUmay(self, paths=None, kind='PUSH'):$/;"	m	class:Plug
registerKey	src/plug/qt/modes/base.py	/^    def registerKey(self, event):$/;"	m	class:Mode
relocateUI	src/plug/qt/obj.py	/^    def relocateUI(self, position):$/;"	m	class:Plug
request	src/plug/qt/utils/listener_zmq.py	/^    request = QtCore.pyqtSignal(dict)$/;"	v	class:ZMQListener
respond	src/plug/qt/base.py	/^    respond=QtCore.pyqtSignal(dict)$/;"	v	class:Plug
returnPressed	src/plug/qt/obj.py	/^    returnPressed=QtCore.pyqtSignal()$/;"	v	class:Plug
right	src/plug/qt/modes/normal/main.py	/^    def right(self, digit=1): $/;"	m	class:Normal
run	src/plug/plug.py	/^    def run(self):$/;"	m	class:Plug
run	src/plug/qt/app.py	/^    def run(self):$/;"	m	class:PlugApp
runMatches	src/plug/qt/modes/base.py	/^    def runMatches(self, matches, partial, key, digit):$/;"	m	class:Mode
save	src/plug/qt/modes/normal/main.py	/^    def save(self): $/;"	m	class:Normal
saveCommands	src/plug/qt/modes/base.py	/^    def saveCommands(self, plug, method, key):$/;"	m	class:Mode
saveCommands	src/plug/qt/modes/exec/main.py	/^    def saveCommands(self, plug, method, key):$/;"	m	class:Exec
search	src/plug/qt/modes/search/main.py	/^        def search(text, view, found=[]):$/;"	f	member:Search.find	file:
set	src/plug/qt/base.py	/^        def set():$/;"	f	member:Plug.setLeaders	file:
set	src/plug/qt/utils/moder.py	/^    def set(self, listener='normal', kind='mode'):$/;"	m	class:Moder
set	src/plug/utils/dotdict.py	/^    def set(self, listener='normal', kind='mode'):$/;"	m	class:Moder
set	src/plug/utils/moder.py	/^    def set(self, listener='normal', kind='mode'):$/;"	m	class:Moder
setActions	src/plug/plug.py	/^    def setActions(self, obj=None):$/;"	m	class:Plug
setBasePath	src/plug/plug.py	/^    def setBasePath(self):$/;"	m	class:Plug
setConnection	src/plug/plug.py	/^    def setConnection(self, kind='PULL'):$/;"	m	class:Plug
setConnection	src/plug/qt/base.py	/^    def setConnection(self, kind='PULL'):$/;"	m	class:Plug
setCustomStyleSheet	src/plug/qt/base.py	/^    def setCustomStyleSheet(self):$/;"	m	class:Plug
setData	src/plug/qt/modes/base.py	/^        def setData(plug, actions, mname=None):$/;"	f	member:Mode.setPlugData	file:
setData	src/plug/qt/modes/exec/main.py	/^    def setData(self):$/;"	m	class:Exec
setData	src/plug/qt/plugs/trees/base.py	/^    def setData(self): pass$/;"	m	class:TreePlug
setFiles	src/plug/plug.py	/^    def setFiles(self):$/;"	m	class:Plug
setFiles	src/plug/qt/base.py	/^    def setFiles(self):$/;"	m	class:Plug
setFilter	src/plug/qt/obj.py	/^    def setFilter(self):$/;"	m	class:Plug
setGUI	src/plug/qt/app.py	/^    def setGUI(self, display_class=None, view_class=None):$/;"	m	class:PlugApp
setLeaders	src/plug/qt/base.py	/^    def setLeaders(self):$/;"	m	class:Plug
setListener	src/plug/qt/base.py	/^    def setListener(self):$/;"	m	class:Plug
setName	src/plug/plug.py	/^    def setName(self):$/;"	m	class:Plug
setName	src/plug/qt/app.py	/^    def setName(self):$/;"	m	class:PlugApp
setOSListener	src/plug/qt/base.py	/^    def setOSListener(self):$/;"	m	class:Plug
setParser	src/plug/plug.py	/^    def setParser(self): self.parser = argparse.ArgumentParser()$/;"	m	class:Plug
setPath	src/plug/qt/plugs/trees/file.py	/^    def setPath(self, path=None):$/;"	m	class:FileBrowser
setPlugData	src/plug/qt/modes/base.py	/^    def setPlugData(self):$/;"	m	class:Mode
setModer	src/plug/plug.py	/^    def setModer(self): self.moder=Moder(self)$/;"	m	class:Plug
setModer	src/plug/qt/app.py	/^    def setModer(self): self.moder=Moder(self)$/;"	m	class:PlugApp
setSettings	src/plug/plug.py	/^    def setSettings(self):$/;"	m	class:Plug
setShortcuts	src/plug/qt/base.py	/^    def setShortcuts(self):$/;"	m	class:Plug
setSystemShortcut	src/plug/plug.py	/^    def setSystemShortcut(self):$/;"	m	class:Plug
setText	src/plug/qt/modes/input/main.py	/^    def setText(self):$/;"	m	class:Input
setText	src/plug/qt/modes/input/widget.py	/^    def setText(self, text):$/;"	m	class:InputWidget
setText	src/plug/qt/plugs/powerline/widget.py	/^    def setText(self, kind, text):$/;"	m	class:PowerlineWidget
setUI	src/plug/qt/modes/exec/main.py	/^    def setUI(self):$/;"	m	class:Exec
setUI	src/plug/qt/modes/search/main.py	/^    def setUI(self):$/;"	m	class:Search
setUI	src/plug/qt/obj.py	/^    def setUI(self): $/;"	m	class:Plug
setUI	src/plug/qt/plugs/powerline/main.py	/^    def setUI(self):$/;"	m	class:Powerline
setUI	src/plug/qt/plugs/trees/base.py	/^    def setUI(self):$/;"	m	class:TreePlug
setup	src/plug/plug.py	/^    def setup(self):$/;"	m	class:Plug
setup	src/plug/qt/modes/base.py	/^    def setup(self):$/;"	m	class:Mode
setup	src/plug/qt/modes/input/widget.py	/^    def setup(self):$/;"	m	class:InputWidget
setup	src/plug/qt/obj.py	/^    def setup(self):$/;"	m	class:Plug
setup	src/plug/qt/utils/moder.py	/^    def setup(self):$/;"	m	class:Moder
setup	src/plug/utils/dotdict.py	/^    def setup(self):$/;"	m	class:Moder
setup	src/plug/utils/moder.py	/^    def setup(self):$/;"	m	class:Moder
showField	src/plug/qt/modes/input/main.py	/^    def showField(self, field=True, label=False):$/;"	m	class:Input
showList	src/plug/qt/modes/exec/main.py	/^    def showList(self, text=None): $/;"	m	class:Exec
test_app_initiated	tests/test_zmq.py	/^def test_app_initiated(plug): $/;"	f
test_intent_and_entity_properties	tests/test_zmq.py	/^def test_intent_and_entity_properties(plug):$/;"	f
test_no_parent_port_working	tests/test_zmq.py	/^def test_no_parent_port_working(plug):$/;"	f
toggle	src/plug/plug.py	/^    def toggle(self):$/;"	m	class:Plug
toggle	src/plug/qt/plugs/powerline/main.py	/^    def toggle(self): super().toggle()$/;"	m	class:Powerline
toggle	src/plug/qt/plugs/trees/base.py	/^    def toggle(self): super().toggle()$/;"	m	class:TreePlug
toggleCursor	src/plug/qt/modes/normal/main.py	/^    def toggleCursor(self): $/;"	m	class:Normal
toggleList	src/plug/qt/modes/search/main.py	/^    def toggleList(self):$/;"	m	class:Search
up	src/plug/qt/modes/normal/main.py	/^    def up(self, digit=1): $/;"	m	class:Normal
update	src/plug/utils/picky.py	/^    def update(self): pass$/;"	m	class:Picky
updatePicks	src/plug/qt/utils/moder.py	/^    def updatePicks(self): super().updatePicks()$/;"	m	class:Moder
updatePicks	src/plug/utils/dotdict.py	/^    def updatePicks(self): self.picky.update()$/;"	m	class:Moder
updatePicks	src/plug/utils/moder.py	/^    def updatePicks(self): self.picky.update()$/;"	m	class:Moder
updatePosition	src/plug/qt/modes/input/widget.py	/^    def updatePosition(self):$/;"	m	class:InputWidget
watchFile	src/plug/qt/utils/buffer.py	/^    def watchFile(self, filePath): $/;"	m	class:Buffer
yankText	src/plug/qt/modes/input/main.py	/^    def yankText(self):$/;"	m	class:Input
zoomIn	src/plug/qt/modes/normal/main.py	/^    def zoomIn(self, digit=1): $/;"	m	class:Normal
zoomOut	src/plug/qt/modes/normal/main.py	/^    def zoomOut(self, digit=1): $/;"	m	class:Normal
